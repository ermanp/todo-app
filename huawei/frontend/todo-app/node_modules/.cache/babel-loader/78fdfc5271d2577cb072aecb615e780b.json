{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/auth-test-bean', {\n      headers: {\n        authorization: this.createBasicAuthToken(user, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    let basicAuthHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    console.log('resiter successful login');\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(basicAuthHeader);\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(basicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Dev/huawei/frontend/todo-app/src/components/todo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","user","window","btoa","registerSuccessfulLogin","basicAuthHeader","console","log","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","getItem","getLoggedInUserName","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA2B;AAEvBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAoB;AAEjD,WAAOJ,KAAK,CAACK,GAAN,CAAU,sCAAV,EAAkD;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BC,IAA1B,EAA+BL,QAA/B;AAAhB;AAAV,KAAlD,CAAP;AACH;;AAGDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAoB;AACpC,WAAO,WAAYM,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAnB;AAEH;;AAEDQ,EAAAA,uBAAuB,CAACT,QAAD,EAAWC,QAAX,EAAoB;AAEvC,QAAIS,eAAe,GAAG,WAAYH,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlC;AAEAU,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4Cd,QAA5C;AACA,SAAKe,sBAAL,CAA4BL,eAA5B;AACH;;AAEDM,EAAAA,MAAM,GAAE;AACJH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH;;AAEDC,EAAAA,cAAc,GAAE;AACZ,QAAIZ,IAAI,GAAGO,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGb,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,WAAO,IAAP;AACH;;AAEDc,EAAAA,mBAAmB,GAAE;AACjB,QAAId,IAAI,GAAGO,cAAc,CAACM,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGb,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP;AAChB,WAAOA,IAAP;AACH;;AAEDS,EAAAA,sBAAsB,CAACL,eAAD,EAAkB;AAEpCb,IAAAA,KAAK,CAACwB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKN,cAAL,EAAJ,EAA2B;AACvBM,QAAAA,MAAM,CAACrB,OAAP,CAAeC,aAAf,GAA+BM,eAA/B;AACH;;AACD,aAAOc,MAAP;AACH,KANL;AAQH;;AAhDsB;;AAoD3B,eAAe,IAAI1B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nclass AuthenticationService{\r\n\r\n    executeBasicAuthenticationService(username, password){\r\n       \r\n        return axios.get('http://localhost:8080/auth-test-bean', {headers: {authorization: this.createBasicAuthToken(user,password)}})\r\n    }\r\n\r\n\r\n    createBasicAuthToken(username, password){\r\n        return 'Basic ' +  window.btoa(username + \":\" + password)\r\n        \r\n    }\r\n\r\n    registerSuccessfulLogin(username, password){\r\n        \r\n        let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\r\n\r\n        console.log('resiter successful login');\r\n        sessionStorage.setItem('authenticatedUser', username);\r\n        this.setupAxiosInterceptors(basicAuthHeader)\r\n    }\r\n\r\n    logout(){\r\n        sessionStorage.removeItem('authenticatedUser');\r\n    }\r\n\r\n    isUserLoggedIn(){\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null) return false;\r\n        return true;\r\n    }\r\n\r\n    getLoggedInUserName(){\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null) return '';\r\n        return user;\r\n    }\r\n\r\n    setupAxiosInterceptors(basicAuthHeader) {\r\n        \r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = basicAuthHeader\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}