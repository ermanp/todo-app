{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\huawei\\\\frontend\\\\todo-app\\\\src\\\\components\\\\todo\\\\TodoComponent.jsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../../api/todo/TodoDataService.js';\nimport AuthenticationService from './AuthenticationService.js';\n\nclass TodoComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      description: '',\n      targetDate: moment(new Date()).format('YYYY-MM-DD')\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.id === -1) {\n      return;\n    }\n\n    let username = AuthenticationService.getLoggedInUserName();\n    TodoDataService.retrieveTodo(username, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      targetDate: moment(new Date()).format('YYYY-MM-DD')\n    }));\n  }\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = 'Enter a Description';\n    } else if (values.description.length < 5) {\n      errors.description = 'Enter at least 5 chars in Description';\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = 'Enter a valid target date';\n    }\n\n    console.log(values);\n    return errors;\n  }\n\n  onSubmit(values) {\n    console.log(this.state.id);\n    let username = AuthenticationService.getLoggedInUserName();\n    let todo = {\n      id: this.state.id,\n      description: values.description,\n      targetDate: values.targetDate,\n      user: ''\n    };\n\n    if (this.state.id === '-1') {\n      console.log('truetrrr');\n      TodoDataService.createTodo(username, todo).then(() => {\n        this.props.history.push('/todos');\n      });\n    } else {\n      console.log('falsesss');\n      TodoDataService.updateTodo(username, this.state.id, {\n        id: this.state.id,\n        description: values.description,\n        targetDate: values.targetDate\n      }).then(() => {\n        this.props.history.push('/todos');\n      });\n    }\n\n    console.log(values);\n  }\n\n  render() {\n    let _this$state = this.state,\n        description = _this$state.description,\n        targetDate = _this$state.targetDate;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Todo \"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: {\n        description: description,\n        targetDate: targetDate\n      },\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateOnBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"description\",\n      component: \"div\",\n      className: \"aler alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"targetDate\",\n      component: \"div\",\n      className: \"aler alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Description\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Target Date\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"date\",\n      name: \"targetDate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Save\")))));\n  }\n\n}\n\nexport default TodoComponent;","map":{"version":3,"sources":["C:/Dev/huawei/frontend/todo-app/src/components/todo/TodoComponent.jsx"],"names":["React","Component","moment","Formik","Form","Field","ErrorMessage","TodoDataService","AuthenticationService","TodoComponent","constructor","props","state","id","match","params","description","targetDate","Date","format","onSubmit","bind","validate","componentDidMount","username","getLoggedInUserName","retrieveTodo","then","response","setState","data","values","errors","length","isValid","console","log","todo","user","createTodo","history","push","updateTodo","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport moment from 'moment'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport TodoDataService from '../../api/todo/TodoDataService.js';\r\nimport AuthenticationService from './AuthenticationService.js';\r\n\r\n\r\n\r\nclass TodoComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            description: '',\r\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        if (this.state.id === -1) {\r\n            return\r\n        }\r\n\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        TodoDataService.retrieveTodo(username, this.state.id)\r\n            .then(response => this.setState({\r\n                description: response.data.description,\r\n                targetDate: moment(new Date()).format('YYYY-MM-DD')\r\n            }))\r\n    }\r\n\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.description) {\r\n            errors.description = 'Enter a Description'\r\n        } else if (values.description.length < 5) {\r\n            errors.description = 'Enter at least 5 chars in Description'\r\n        }\r\n        if (!moment(values.targetDate).isValid()) {\r\n            errors.targetDate = 'Enter a valid target date'\r\n\r\n        }\r\n        console.log(values)\r\n        return errors\r\n\r\n    }\r\n\r\n\r\n\r\n    onSubmit(values) {\r\n\r\n        console.log(this.state.id);\r\n        let username = AuthenticationService.getLoggedInUserName();\r\n\r\n        let todo = {\r\n            id: this.state.id,\r\n            description: values.description,\r\n            targetDate: values.targetDate,\r\n            user: ''\r\n        }\r\n\r\n        if (this.state.id === '-1') {\r\n            console.log('truetrrr');\r\n            TodoDataService.createTodo(username, todo).then(() => { this.props.history.push('/todos') })\r\n\r\n        } else {\r\n            console.log('falsesss');\r\n            TodoDataService.updateTodo(username, this.state.id, {\r\n                id: this.state.id,\r\n                description: values.description,\r\n                targetDate: values.targetDate\r\n            }).then(() => { this.props.history.push('/todos') })\r\n        }\r\n        console.log(values);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let { description, targetDate } = this.state\r\n\r\n        return (<div>\r\n            <h1>Todo </h1>\r\n            <div className=\"container\">\r\n                <Formik\r\n                    initialValues={{\r\n                        description: description,\r\n                        targetDate: targetDate\r\n                    }}\r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        (props) => (\r\n                            <Form>\r\n                                <ErrorMessage name=\"description\" component=\"div\"\r\n                                    className=\"aler alert-warning\" />\r\n                                <ErrorMessage name=\"targetDate\" component=\"div\"\r\n                                    className=\"aler alert-warning\" />\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>Description</label>\r\n                                    <Field className=\"form-control\"\r\n                                        type=\"text\"\r\n                                        name=\"description\" />\r\n\r\n                                </fieldset>\r\n\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>Target Date</label>\r\n                                    <Field className=\"form-control\" type=\"date\"\r\n                                        name=\"targetDate\" />\r\n                                </fieldset>\r\n                                <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                            </Form>\r\n\r\n                        )\r\n                    }\r\n                </Formik>\r\n\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default TodoComponent"]},"metadata":{},"sourceType":"module"}